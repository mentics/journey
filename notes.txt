Process:
1) Find SPY trades by running the following for expr from 1 to whatever (saw some > .74 cases even at 10 or more). Consider roi > 1.0 and prob > .75 is ok. TODO: kelly?
using Joe
j = Joe
jorn(1:4)
i = 1
r = j.ress[i][1]
xdr(i, r.lms)
pretyble(xmet(i, r.lms))
xkel(i, r.lms)
so(r.lms)
solr(r.lms, primitDir)

2) Look for trades to close early by running:
using CmdTrading
CmdTrading.findTradesToClose()

#### Not sure doing short puts is worth the bother other than it's one of the few things we can do in the brokerage link account, which is about $100k we need to manage. ####
2) Look for short puts to buy with apr > .5
ll = c.lookAll()

==========

compare probkde new thing with random guesses (from norm distrib or something)

jorn needs to check for trades today to avoid day trading

Schedule the call to findTradesToClose and send email if found
include quick copy/paste call to close it (but it needs to handle worthless longs)

findRoll should consider nearby strikes

Adjust option quote asks based on the one nearer the money

Need to move adjust back into calcutil.calcmetrics beacuse xmet and friends

test multivariate transformer learning by adding another input that randomly switches between 1 and -1 and when -1 it changes the direction of the sine wave
[sine(2π*i/100) for i in 1000]
eg: but with random instead of periodic: [sin((i % 40 > 20 ? -1 : 1) * 2π*i/100) for i in 1:1000]

Doing FFT analysis on time series is useful to find cycles

fix close range in trade output to ignore closed legs

restructure: low level, call it KelCalc.jl and in glue level have Kel.jl. Same for Ret and Met, etc.
Then in general use can type: Kel.calc, Met.calc, Ret.calc, etc.

got BlackBoxOptim branch: https://github.com/robertfeldt/BlackBoxOptim.jl#compathelper/new_version/2022-06-20-01-48-33-841-02748865794

Fix rate calc in findTradesToClose

kelly calc in Joe needs to be adjusted lik calcmetrics

Calc kelly sizing by looping through existing trades, calc worse case, use resulting balance * some % of kelly to say what size to use for new candidate trade
use kelly to calculate position sizing based on number of open positions
draw table of max loss desc order of trade fill time and show worst case "balance"

Is there a way to structure the trade so it time decay immediately starts moving in our direction?

put in mechanism to enforce not day trading

When deep in the money, the slippage can be much higher. We should penalize such candidates.

====================

.*\s(.+) Cash Covered Put.*

How about do our trade search for anything that is > 90% probability and > 100% annual rate?

Earnings date for MUX didn't work
also didn't work for JOBY

call tradier to get dividend ex date
call tradier to get earnings date: https://documentation.tradier.com/brokerage-api/markets/fundamentals/get-calendars
filter if primitDir for this strike is better than primitDir for next higher strike (ie. bad pricing)

Combos: Get volatility and 52 week range on stocks so we can calculate how far away from curp we are willing to go for strike
or could get history and calc 99 percentile move

implement MaxClose in trade printout

**** I need to do my own implied volatility calculation based on tex and maybe the new fit formula

Can we take simultaneous kelly bets?
Do we need to consider open positions as adding to a single bet and so position sizing based on that?
Or can we consider each one as a separate bet and so size it solely on it's on kelly number?
So, we could size every one at half kelly or something?
Except... the kelly concept assumes iteration, so it assumes bet2 is sized based on the result of bet2.
So... we could size bet n based on the worst cases of all existing bets.

==========

We're basing prob on ivs which is on prices which also affects metrics, so... seems like could be some circular reasoning there.
Maybe use something else for prob?

Sometimes prices jump all over. Maybe we should make N calls in a row and then average the prices for chains

Should we consider last if it's inside bid/ask?

Calc equivalent of vix for ivs for each expir

Add a check when ordering: no selling puts for next day

BlackScholes will get the right answer if fed the right IV. So, try to curve fit iv.

count holidays separate from weekends in marketdur/timing

we should assert that opens.end is always == posts.begin so if it isn't sometime we can fix our code

Increase frequency of schedstrat after optimizing finding good candidates

Maybe need to deliberately wait for price move or time before recommending because we're getting things that sort of cancel each other out, though... maybe we need that to get little improvements?

Use scholes formula (or make our own) against real prices and calculate exact parameters so it generally works. Use bands for volatility in there. Then we can use that to calc price anytime. Then can do backtesting.

calc metrics for if price moved X up or down and include that in score

Change todo output not to include net close for already closed legs

maybe not sleeping because need to set allow suspend in the sched thread

A close order used the wrong limit because bfly, and market closed shorts, and used total limit for quantity 2 single leg instead / 2

Set min score for each expiration so I can wait for a better one

The challenge is that once it's prob=1, any new trades would likely punch holes and so we would filter that out, but... I guess that's what allowing farther out trades to lower prob is for.

Scan all expirs and notify if too few trades based on days out

Is there a way to score by: how easy it might be to fill holes later?

Skip if combi before creating ret if netOpen is too negative to optimize

Make a general "alert me if predicate" type of function that runs in sched

make 0 index mean today for all functions (todo, drx, etc)

For strat emails, send html email with fixed width font

Check periodically for any near expiration for which we don't have 100% prob return

as add positions, the ev/numPos shouldn't drop too much

Stop checking day 1 if it's within a certain number of market hours (previous day, late in day)

make all the exp indexes match: todo, drx, etc.

For existing positions, calc how much IV already dropped of long leg so we can plot it based on that. Or does it already use the new quoted IV?

Make it so can add another chart to compare

Update bap to allow small improvement to see if we can get something when currently getting no candidates.

in "found entry" emails, include comparison of "ev was X, now could by Y"

Customize todo output to easily ignore legs we can let expire

Write up process doc. eg.: as soon as can buy back short legs for $.01, then do so

can store level be this low?
Globals is at data level?
Utils can depend on types
Types mostly only depend on Types

lmsPos = LegMeta[]
empty!(lmsPos)
an(2)
lmsPos = tos(LegMeta, CmdStrats.lastPosStrat[])
ana(2,3,4; lmsPos)
append!(lmsPos, tos(LegMeta, ar(1)))

setvr(.7)
lmsPos = LegMeta[]
days1 = [4,5,6,7,8]
days2 = [11,12,13,14]
days3 = [18,19,20,21,22, 25]
# ,26,27,28]
for day in days1
	snap(4,day,0,0)
	ex = findfirst(x -> x == Date("2022-04-29"), expirs())
	ana(ex, ex+1; lmsPos)
	append!(lmsPos, tos(LegMeta, ar(1)))
end

Important configs:
vtyRatio, improve in Between

Why do I get nice trades for some expirations and can't for others? Could it be the weekends messing with the volatility timing?
looks like sorting by ev is problematic. optimizing by evr got me 100% prob profit when by ev, I couldn't find anything I liked.
but that might be because market moved a lot while I was looking at that

If market goes to a price, the long calendar leg will be priced differently based on the skew. Does blackscholes consider this? can I adjust for it?

why is it showing that adding a negative ev can make both ev higher? I wonder if it's because of the adjustment?

2 primary needs to solidify process:
1) Simulate adding additional positions incrementally
2) Identify the best scoring that adapts if necessary
extra 1: refine blackscholes pricing because I don't think it's working quite right.
extra 2: Also line pricing to deal with how we exit--don't always get to the end, to 0, risks of near the money, etc.
extra 3:
extra 4: tools to deal with closing partially before expiration because near the money, and highlight those that should be closed (if time to expir < X and ITM is within Y highlight that leg)

standardize on combined color in graphs

get market calendar and notify of holidays in next 2 weeks https://documentation.tradier.com/brokerage-api/markets/get-calendar

warning in results if base score is near calcutil evr cap

Calc if current trade leg prices for cal spreads are matching the model we used

Create something that searches backup orders and sees if they're in the database, but how to handle cancels? see if Starting trades that might match?

move code out of Cmd* modules so Cmd* are very simple

look at source for now(UTC) and see if more efficient code to do that

remove duplication in runstrats results
get rid of duplicates and conflicting legs in processing
make sure expired processor is working
create 1 mil random valid strats and make sure that all of them get called into scoring during a run

Keep worthless long calendar positions until expiration in case they get value back

Get calendar and show hours and holidays: https://documentation.tradier.com/brokerage-api/markets/get-calendar

Include in scheduler: watch kept calotm positions for if they become worth enough, we can sell them for extra profit

get extremes of all metrics, normalize, then add together normalized values to get composite metric

for snap, also only query trades open at that time.

is it wasting processing combis that are all not the target date?

overriding Base.show might be slow compilation. If so, avoid?

Because we're using max loss as risk in the kelly calc, something that has a huge max risk at an extreme shrinks the losses in the middle and makes the overall position look much better when compared to others.
Need to change the calc so that doesn't happen.
Maybe using the same max risk for all cases would solve it?

have probs store interval/exp so things can validate that it's right for context (I mistakenly use wrong one for later expirs)

Long running task scanning for good trades
same task can auto run snave()
and save market data periodically

show return at current price
Fix output for sa* netopen is wrong and check others

in results, show ev profit and loss values with vals * probs for just wins and loss bins

store bid/ask in TradeLegMeta

Figure out ideal trade given user input params and put in score/filter for that in InfoStrats and keep N best candidates

should we use vtyRatio based on atmiv()[2] - [1] or something like that?

get rid of duplicates in analysis results

handle canceled orders for closing a trade

Display legs in a pretty table:
pretty_table(data; tf=tf_borderless, noheader=true)

find api for ex dividend date
don't allow short calls on ex-dividend date (in Combis.jl)

in plotthings, draw dots for strike prices

More bins, and wider min/max in configs

change bins to sizedvector because it might be too big for svector

Change stratInfo to take a vector of legquotes for faster compilation

Make sure butterflies are calcualted correctly for kelly because I don't know if we're using weight properly

watcher for filled isn't working for orders: gives can't fill leg

fix Reconcile

schedule copy database backup

for drawing a trade to be closed (todo()), plot open price for the day when it was opened

when closing, save it to closing.
while watching, if closing canceled, move it

add startwatcher for closing trade after submit close order

save metadata in trade when start

change distri interval to include weekends, time, something. go from same day of week to same day of week

long running task that saves market and order data periodically and at important times

check the balance on threads running analysis: is it waiting on one (small number) thread at the end?

fixing json:
jq 'walk(if type=="object" and .extra then . + { greeks:.extra.greeks } else . end )' < chains-2022-01-28.10-35.json > chains2.json

wt -d C:/data/log PowerShell.exe "Get-Content debug.log -Wait -Tail 20" ; sp -D -V PowerShell.exe "Get-Content info.log -Wait -Tail 20" ; sp -D -H PowerShell.exe "Get-Content warn.log -Wait -Tail 20" ; move-focus left ; sp -D -H PowerShell.exe "Get-Content error.log -Wait -Tail 20"

#### Done ####
Try out free cloud cockroachdb -- it works
on startup, copy cloud db to local (if it's newer), use local for faster -- decided to use cockroachdb instead

# For dealing with mistakes manually. Insert order with two legs:
insert into ord ("oid","symbol","class","ordertype","status","primitdir","prilldir","tscreated","tsfilled")
	values (1001,'SPY','4',3,'Filled',1.0,1.0,1000*cast(now() as int),1000*cast(now() as int))
insert into legord ("olid","oid","act","style","expiration","strike","side","quantity","prilldir","tscreated","tsfilled")
	values (2001,1001,-1,-1,'2022-04-22',435.0,1,1.0,0.0,1000*cast(now() as int),1000*cast(now() as int))
insert into legord ("olid","oid","act","style","expiration","strike","side","quantity","prilldir","tscreated","tsfilled")
	values (2002,1001,-1,-1,'2022-04-22',436.0,-1,1.0,1.0,1000*cast(now() as int),1000*cast(now() as int))


==== 2022.07.22 ====
Short condor for 6/30 on 6/15 then long condor for 6/30 on 6/27

=== same date, diff exps, so not realistic because price can move ===
snap(5,20,8,0)
dir = 1 ; ana(8)
ret1 = ret(1)
dir = -1 ; ana(2)
ret2 = ret(1)
cr1 = combineRets([ret1, ret2])
drawRet(cr1; label="c")
drawRet!(ret1; label="1")
drawRet!(ret2; label="2")

=== diff date, same exp 6/8 ===
snap(5,20,7,0)
dir = 1 ; ana(8)
ret1 = ret(1)
snap(6,1,7,0)
dir = -1 ; ana(3)
ret2 = ret(1)
cr1 = combineRetsC([ret1, ret2])
drawRet(cr1; label="c")
drawRet!(ret1; label="1")
drawRet!(ret2; label="2")






NO: didn't work because it used same start price?
snap(5,20,7,0)
dateTarget = expir(8)
dir = 1 ; ana(8)
lms1 = arl(1)
snap(6,1,7,0)
@assert expir(3) == dateTarget
dir = -1 ; ana(3)
lms2 = arl(1)
clms1 = combineTo(Ret, vcat(lms1, lms2), dateTarget, market().startPrice, 1.0)
drawRet(cr1; label="c")
drawRet!(ret1; label="1")
drawRet!(ret2; label="2")

foreach((:maxStrikeDist, :maxPutHeight, :maxCallHeight)) do sym
	config()[:Strats][sym] = 22
end

################### corr adding #################
ys = [1,2,3]
xs1 = [2,4,7]
xs2 = [0,0,1]
v1 .- (v2 .* sign(cor(v1, v2)) .* (sum(abs, v1) / sum(abs, v2)))

oys = [1.,2.,3.]
oxs1 = [-5.,-6.,-7.]
ys = normalize1(oys)
xs1 = normalize1(oxs1 * sign(cor(ys, xs1)))
ys .- (xs1 .* sign(cor(ys, xs1)) .* (sum(abs, ys) / sum(abs, xs1)))

## end: corr adding ##

For libpq issue with 0E-24, could override this method:

# Convert a string to a decimal, e.g. "0.01" -> Decimal(0, 1, -2)
parameters(x::AbstractString) = (abs(parse(BigInt, x)), 0)
function origBaseParse(::Type{Decimal}, str::AbstractString)
    if 'e' in str
        return parse(Decimal, Decimals.scinote(str))
    end
    c, q = Decimals.parameters(('.' in str) ? split(str, '.') : str)
    normalize(Decimal((str[1] == '-') ? 1 : 0, c, q))
end

function Base.parse(::Type{Decimal}, str::AbstractString)
	origBaseParse(Decimal, str)
end

function LibPQ.pqparse(::Type{Decimal}, str::AbstractString)
	parse(Decimal, lowercase(str))
end
 ================================

# 3d matrix:
m3 = cat([1 2 3; 1 2 3], [4 5 6; 4 5 6]; dims=3)
reshape(reshape(m3, (2*3, 2)), (2,3,2))
